/* global describe it beforeEach ethers */
const chai = require('chai');
const chaiAsPromised = require('chai-as-promised');

chai.use(chaiAsPromised);

const { expect } = chai;

let verifier;

describe('Logic/Verifier', () => {
  beforeEach(async () => {
    const VerifierStub = await ethers.getContractFactory('VerifierStub');
    verifier = await VerifierStub.deploy();
  });

  it('Should set verifying key', async () => {
    const verifyingKey = {
      artifactsIPFSHash: '',
      alpha1: {
        x: 20491192805390485299153009773594534940189261866228447918068658471970481763042n,
        y: 9383485363053290200918347156157836566562967994039712273449902621266178545958n,
      },
      beta2: {
        x: [
          4252822878758300859123897981450591353533073413197771768651442665752259397132n,
          6375614351688725206403948262868962793625744043794305715222011528459656738731n,
        ],
        y: [
          21847035105528745403288232691147584728191162732299865338377159692350059136679n,
          10505242626370262277552901082094356697409835680220590971873171140371331206856n,
        ],
      },
      gamma2: {
        x: [
          11559732032986387107991004021392285783925812861821192530917403151452391805634n,
          10857046999023057135944570762232829481370756359578518086990519993285655852781n,
        ],
        y: [
          4082367875863433681332203403145435568316851327593401208105741076214120093531n,
          8495653923123431417604973247489272438418190587263600148770280649306958101930n,
        ],
      },
      delta2: {
        x: [
          188902110140960999437215333615254189209919314487640995097607932987630137870n,
          11073681697308750762902631393144770045265535434152998926166681327742862389720n,
        ],
        y: [
          12142140203130703985152996592244904686069461493175054219378597868280155585117n,
          15063650998723154314373222694930431534039250208917157182860312892930704399553n,
        ],
      },
      ic: [
        {
          x: 2993443399483829479859062654623367849867402030827446168645690400729048057171n,
          y: 6290549814710588933008910432328009935547669554680347457133958214377467698367n,
        },
        {
          x: 4817169966987370106994954147230318244697332121437005888971768555740971493685n,
          y: 6994616690753656575650417771605518728772286127296950476420584008141402194156n,
        },
      ],
    };

    const setKey = await (await verifier.setVerificationKey(1, 2, verifyingKey)).wait();

    expect(setKey.events[0].event).to.equal('VerifyingKeySet');
    expect(setKey.events[0].args.nullifiers).to.equal(1n);
    expect(setKey.events[0].args.commitments).to.equal(2n);
    expect(setKey.events[0].args.verifyingKey.artifactsIPFSHash).to.equal('');
  });
});
